{"version":3,"file":"index.js","sources":["../../electron/backend/runStatusModule.ts","../../electron/main/update.ts","../../electron/main/index.ts"],"sourcesContent":["import { exec } from \"child_process\";\r\nimport path from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nconst isDev = !!process.env.VITE_DEV_SERVER_URL;\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nconst pythonScriptPath = isDev\r\n  ? path.join(__dirname, 'trafikverket_status_module.py') // <- dev\r\n  : path.join(__dirname, '../../../dist-electron/trafikverket_status_module.py'); //<- build\r\n\r\nexport type RunStatusArgs = {\r\n  id: number;\r\n  testedPath: string;\r\n  untestedPath: string;\r\n  planPath: string;\r\n  useExe?: boolean;\r\n};\r\n\r\nexport type TrafikverketResult = {\r\n  id: number;\r\n  une: string;\r\n  driftsomr: string;\r\n  une_id: string;\r\n  bandel: string;\r\n  coverage_pct: number;\r\n  tested_length_km: number;\r\n  total_length_km: number;\r\n  status: string;\r\n  planned_date: Date | null;\r\n  tested_date: Date | null;\r\n  last_previous_test: Date | null;\r\n  next_test_date: Date | null;\r\n  days_until: number | null;\r\n  deadline: Date | null;\r\n  deadline_status: string;\r\n  km_from: number;\r\n  km_to: number;\r\n  gaps: {\r\n    start_km: number;\r\n    end_km: number;\r\n    length_km: number;\r\n  }[];\r\n};\r\n\r\nconst isValidResult = (raw: any): raw is Omit<\r\n  TrafikverketResult,\r\n  \"planned_date\" | \"tested_date\" | \"deadline\" | \"last_previous_test\" | \"next_test_date\"\r\n> & {\r\n  planned_date: string | null;\r\n  tested_date: string | null;\r\n  deadline: string | null;\r\n  last_previous_test: string | null;\r\n  next_test_date: string | null;\r\n} => {\r\n  return (\r\n    typeof raw === \"object\" &&\r\n    typeof raw.id === \"number\" &&\r\n    typeof raw.une_id === \"string\" &&\r\n    typeof raw.une === \"string\" &&\r\n    typeof raw.driftsomr === \"string\" &&\r\n    typeof raw.bandel === \"string\" &&\r\n    typeof raw.coverage_pct === \"number\" &&\r\n    typeof raw.tested_length_km === \"number\" &&\r\n    typeof raw.total_length_km === \"number\" &&\r\n    typeof raw.km_from === \"number\" &&\r\n    typeof raw.km_to === \"number\" &&\r\n    typeof raw.status === \"string\" &&\r\n    (raw.planned_date === null || typeof raw.planned_date === \"string\") &&\r\n    (raw.tested_date === null || typeof raw.tested_date === \"string\") &&\r\n    (raw.last_previous_test === null || typeof raw.last_previous_test === \"string\") &&\r\n    (raw.next_test_date === null || typeof raw.next_test_date === \"string\") &&\r\n    (raw.days_until === null || typeof raw.days_until === \"number\") &&\r\n    (raw.deadline === null || typeof raw.deadline === \"string\") &&\r\n    typeof raw.deadline_status === \"string\" &&\r\n    Array.isArray(raw.gaps) &&\r\n    raw.gaps.every(\r\n      (gap: any) =>\r\n        typeof gap.start_km === \"number\" &&\r\n        typeof gap.end_km === \"number\" &&\r\n        typeof gap.length_km === \"number\"\r\n    )\r\n  );\r\n};\r\n\r\nconst parseTrafikverketResult = (json: ReturnType<typeof JSON.parse>): TrafikverketResult => {\r\n  const toDate = (d: string | null): Date | null => (d ? new Date(d) : null);\r\n\r\n  return {\r\n    ...json,\r\n    planned_date: toDate(json.planned_date),\r\n    tested_date: toDate(json.tested_date),\r\n    last_previous_test: toDate(json.last_previous_test),\r\n    next_test_date: toDate(json.next_test_date),\r\n    deadline: toDate(json.deadline),\r\n    days_until: json.days_until,\r\n  };\r\n};\r\n\r\nexport function runStatusModule({\r\n  id,\r\n  testedPath,\r\n  untestedPath,\r\n  planPath,\r\n  useExe = false,\r\n}: RunStatusArgs): Promise<TrafikverketResult> {\r\n  const script = useExe\r\n    ? \"trafikverket_status_module.exe\"\r\n    : \"trafikverket_status_module.py\";\r\n\r\n  const cmd = `${useExe ? '' : 'python'} \"${pythonScriptPath}\" --all --tested \"${testedPath}\" --untested \"${untestedPath}\" --testplan \"${planPath}\"`;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    exec(cmd, (err, stdout, stderr) => {\r\n      if (err) return reject(new Error(stderr.trim() || err.message));\r\n\r\n      let parsedJson;\r\n      try {\r\n        parsedJson = JSON.parse(stdout);\r\n      } catch {\r\n        return reject(new Error(`Kunde inte parsa JSON:\\n${stdout}`));\r\n      }\r\n\r\n      if (!isValidResult(parsedJson)) {\r\n        return reject(new Error(\"Svar saknar rätt struktur eller innehåller felaktiga typer.\"));\r\n      }\r\n\r\n      resolve(parseTrafikverketResult(parsedJson));\r\n    });\r\n  });\r\n}\r\n\r\nexport function runStatusModuleAll({\r\n  testedPath,\r\n  untestedPath,\r\n  planPath,\r\n  useExe = false,\r\n}: Omit<RunStatusArgs, \"uneId\">): Promise<TrafikverketResult[]> {\r\n  const script = useExe\r\n    ? \"trafikverket_status_module.exe\"\r\n    : \"trafikverket_status_module.py\";\r\n\r\n  const cmd = `${\r\n    useExe ? \"\" : \"python \"\r\n  }\"${pythonScriptPath}\" --all --tested \"${testedPath}\" --untested \"${untestedPath}\" --testplan \"${planPath}\"`;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    exec(cmd, (err, stdout, stderr) => {\r\n      if (err) return reject(new Error(stderr.trim() || err.message));\r\n\r\n      let parsedJson;\r\n      try {\r\n        parsedJson = JSON.parse(stdout);\r\n      } catch {\r\n        return reject(new Error(`Kunde inte parsa JSON:\\n${stdout}`));\r\n      }\r\n\r\n      console.log(\"DEBUG RESPONSE FROM PYTHON:\", parsedJson);\r\n\r\n      if (!Array.isArray(parsedJson)) {\r\n        return reject(new Error(\"Svar var inte en array.\"));\r\n      }\r\n\r\n      if (!parsedJson.every(isValidResult)) {\r\n        const broken = parsedJson.filter((r: any) => !isValidResult(r));\r\n        console.log(\"Ogiltiga objekt:\", broken);\r\n        return reject(new Error(\"Minst ett objekt har ogiltig struktur.\"));\r\n      }\r\n\r\n      resolve(parsedJson.map(parseTrafikverketResult));\r\n    });\r\n  });\r\n}\r\n","import { app, ipcMain } from 'electron'\r\nimport { createRequire } from 'node:module'\r\nimport type {\r\n  ProgressInfo,\r\n  UpdateDownloadedEvent,\r\n  UpdateInfo,\r\n} from 'electron-updater'\r\n\r\nconst { autoUpdater } = createRequire(import.meta.url)('electron-updater');\r\n\r\nexport function update(win: Electron.BrowserWindow) {\r\n\r\n  // When set to false, the update download will be triggered through the API\r\n  autoUpdater.autoDownload = false\r\n  autoUpdater.disableWebInstaller = false\r\n  autoUpdater.allowDowngrade = false\r\n\r\n  // start check\r\n  autoUpdater.on('checking-for-update', function () { })\r\n  // update available\r\n  autoUpdater.on('update-available', (arg: UpdateInfo) => {\r\n    win.webContents.send('update-can-available', { update: true, version: app.getVersion(), newVersion: arg?.version })\r\n  })\r\n  // update not available\r\n  autoUpdater.on('update-not-available', (arg: UpdateInfo) => {\r\n    win.webContents.send('update-can-available', { update: false, version: app.getVersion(), newVersion: arg?.version })\r\n  })\r\n\r\n  // Checking for updates\r\n  ipcMain.handle('check-update', async () => {\r\n    if (!app.isPackaged) {\r\n      const error = new Error('The update feature is only available after the package.')\r\n      return { message: error.message, error }\r\n    }\r\n\r\n    try {\r\n      return await autoUpdater.checkForUpdatesAndNotify()\r\n    } catch (error) {\r\n      return { message: 'Network error', error }\r\n    }\r\n  })\r\n\r\n  // Start downloading and feedback on progress\r\n  ipcMain.handle('start-download', (event: Electron.IpcMainInvokeEvent) => {\r\n    startDownload(\r\n      (error, progressInfo) => {\r\n        if (error) {\r\n          // feedback download error message\r\n          event.sender.send('update-error', { message: error.message, error })\r\n        } else {\r\n          // feedback update progress message\r\n          event.sender.send('download-progress', progressInfo)\r\n        }\r\n      },\r\n      () => {\r\n        // feedback update downloaded message\r\n        event.sender.send('update-downloaded')\r\n      }\r\n    )\r\n  })\r\n\r\n  // Install now\r\n  ipcMain.handle('quit-and-install', () => {\r\n    autoUpdater.quitAndInstall(false, true)\r\n  })\r\n}\r\n\r\nfunction startDownload(\r\n  callback: (error: Error | null, info: ProgressInfo | null) => void,\r\n  complete: (event: UpdateDownloadedEvent) => void,\r\n) {\r\n  autoUpdater.on('download-progress', (info: ProgressInfo) => callback(null, info))\r\n  autoUpdater.on('error', (error: Error) => callback(error, null))\r\n  autoUpdater.on('update-downloaded', complete)\r\n  autoUpdater.downloadUpdate()\r\n}\r\n","import { app, BrowserWindow, shell, ipcMain, dialog } from 'electron'\r\nimport { createRequire } from 'node:module'\r\nimport { fileURLToPath } from 'node:url'\r\nimport { runStatusModule } from \"../backend/runStatusModule\";\r\nimport { runStatusModuleAll } from \"../backend/runStatusModule\";\r\nimport path from 'node:path'\r\nimport os from 'node:os'\r\nimport { update } from './update'\r\n\r\nconst require = createRequire(import.meta.url)\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\r\n\r\n// The built directory structure\r\n//\r\n// ├─┬ dist-electron\r\n// │ ├─┬ main\r\n// │ │ └── index.js    > Electron-Main\r\n// │ └─┬ preload\r\n// │   └── index.mjs   > Preload-Scripts\r\n// ├─┬ dist\r\n// │ └── index.html    > Electron-Renderer\r\n//\r\nprocess.env.APP_ROOT = path.join(__dirname, '../..')\r\n\r\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\r\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\r\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\r\n\r\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\r\n  ? path.join(process.env.APP_ROOT, 'public')\r\n  : RENDERER_DIST\r\n\r\n// Disable GPU Acceleration for Windows 7\r\nif (os.release().startsWith('6.1')) app.disableHardwareAcceleration()\r\n\r\n// Set application name for Windows 10+ notifications\r\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\r\n\r\nif (!app.requestSingleInstanceLock()) {\r\n  app.quit()\r\n  process.exit(0)\r\n}\r\n\r\nlet win: BrowserWindow | null = null\r\nconst preload = path.join(__dirname, '../preload/index.mjs')\r\nconst indexHtml = path.join(RENDERER_DIST, 'index.html')\r\n\r\nasync function createWindow() {\r\n  win = new BrowserWindow({\r\n    width: 1920,\r\n    height: 1080,\r\n    title: 'Main window',\r\n    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\r\n    webPreferences: {\r\n      preload,\r\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\r\n      // nodeIntegration: true,\r\n\r\n      // Consider using contextBridge.exposeInMainWorld\r\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\r\n      // contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (VITE_DEV_SERVER_URL) { // #298\r\n    win.loadURL(VITE_DEV_SERVER_URL)\r\n    // Open devTool if the app is not packaged\r\n    win.webContents.openDevTools()\r\n  } else {\r\n    win.loadFile(indexHtml)\r\n  }\r\n\r\n  // Test actively push message to the Electron-Renderer\r\n  win.webContents.on('did-finish-load', () => {\r\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\r\n  })\r\n\r\n  // Make all links open with the browser, not with the application\r\n  win.webContents.setWindowOpenHandler(({ url }) => {\r\n    if (url.startsWith('https:')) shell.openExternal(url)\r\n    return { action: 'deny' }\r\n  })\r\n\r\n  // Auto update\r\n  update(win)\r\n}\r\n\r\napp.whenReady().then(createWindow)\r\n\r\napp.on('window-all-closed', () => {\r\n  win = null\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\napp.on('second-instance', () => {\r\n  if (win) {\r\n    // Focus on the main window if the user tried to open another\r\n    if (win.isMinimized()) win.restore()\r\n    win.focus()\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  const allWindows = BrowserWindow.getAllWindows()\r\n  if (allWindows.length) {\r\n    allWindows[0].focus()\r\n  } else {\r\n    createWindow()\r\n  }\r\n})\r\n\r\n// New window example arg: new windows url\r\nipcMain.handle('open-win', (_, arg) => {\r\n  const childWindow = new BrowserWindow({\r\n    webPreferences: {\r\n      preload,\r\n      nodeIntegration: true,\r\n      contextIsolation: false,\r\n    },\r\n  })\r\n\r\n  if (VITE_DEV_SERVER_URL) {\r\n    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)\r\n  } else {\r\n    childWindow.loadFile(indexHtml, { hash: arg })\r\n  }\r\n})\r\n\r\nipcMain.handle('open-file-dialog', async (_, options) => {\r\n  const result = await dialog.showOpenDialog(options);\r\n  return result.canceled ? null : result.filePaths[0];\r\n});\r\n\r\nipcMain.handle('get-all-statuses', async (_event, paths) => {\r\n  const results = await runStatusModuleAll(paths);\r\n  return results;\r\n});\r\n\r\nipcMain.handle(\"run-status-module\", async (event, args) => {\r\n  try {\r\n    const result = await runStatusModule(args);\r\n    return result;\r\n  } catch (err: any) {\r\n    return { error: err.message };\r\n  }\r\n});\r\n\r\nipcMain.handle(\"run-status-module-all\", async (event, args) => {\r\n  try {\r\n    const result = await runStatusModuleAll(args);\r\n    return result;\r\n  } catch (err: any) {\r\n    return { error: err.message };\r\n  }\r\n});"],"names":["__dirname","win","path","fileURLToPath"],"mappings":"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"}